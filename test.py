#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WheelLog Analytics
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FASTAPI_URL = "http://localhost:8000"
N8N_URL = "http://192.168.0.193:5678"  # IP –≤–∞—à–µ–≥–æ LXC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
TELEGRAM_CHAT_ID = "YOUR_CHAT_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Chat ID

def test_fastapi_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è FastAPI"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º FastAPI...")
    try:
        response = requests.get(f"{FASTAPI_URL}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
            return True
        else:
            print(f"‚ùå FastAPI –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_n8n_webhook():
    """–¢–µ—Å—Ç n8n webhook —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º n8n webhook —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º...")
    
    test_data = {
        "filename": "test_ride_local_2025_01_27.csv",
        "timestamp": datetime.now().isoformat(),
        "records_count": 1800,
        "distance_km": 12.5,
        "distance_m": 12500,
        "duration_min": 45.0,
        "duration_sec": 2700,
        "battery_start": 87.0,
        "battery_end": 34.0,
        "battery_used": 53.0,
        "battery_efficiency": 4.24,
        "max_speed": 28.0,
        "avg_speed": 18.2,
        "avg_voltage": 84.2,
        "max_current": 25.5,
        "avg_current": 12.3,
        "avg_temp": 42.1,
        "energy_efficiency": 15.2,
        "has_gps": True,
        "data_quality": "good",
        "data_completeness": {
            "speed_records": 0.95,
            "battery_records": 0.98,
            "gps_records": 0.92
        },
        "chat_id": TELEGRAM_CHAT_ID,
        "source": "wheellog_analytics_local",
        "version": "2.1.0"
    }
    
    try:
        response = requests.post(
            f"{N8N_URL}/webhook/wheellog-webhook",
            json=test_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ n8n webhook —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
            return True
        else:
            print(f"‚ùå n8n webhook –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå n8n webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_fastapi_n8n_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FastAPI ‚Üí n8n"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é FastAPI ‚Üí n8n...")
    
    try:
        response = requests.post(f"{FASTAPI_URL}/test-n8n", timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {result['status']}")
            if result.get('telegram_configured'):
                print("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        else:
            print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False

def test_short_trip():
    """–¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–µ–∑–¥–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–µ–∑–¥–∫—É...")
    
    short_trip_data = {
        "filename": "short_ride_local.csv",
        "timestamp": datetime.now().isoformat(),
        "records_count": 30,
        "distance_km": 0.2,  # –ú–µ–Ω—å—à–µ 0.5 –∫–º
        "duration_min": 0.5,
        "battery_start": 100.0,
        "battery_end": 99.0,
        "battery_used": 1.0,
        "max_speed": 5.0,
        "avg_speed": 3.0,
        "chat_id": TELEGRAM_CHAT_ID
    }
    
    try:
        response = requests.post(
            f"{N8N_URL}/webhook/wheellog-webhook",
            json=short_trip_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'skipped':
                print("‚úÖ –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–µ–∑–¥–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–µ–∑–¥–∫–∏: {e}")
        return False

def test_different_riding_styles():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∫–∞—Ç–∞–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ç–∞–Ω–∏—è...")
    
    styles = [
        {"name": "—Å–ø–æ–∫–æ–π–Ω—ã–π", "max_speed": 15, "avg_speed": 10},
        {"name": "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "max_speed": 22, "avg_speed": 18},
        {"name": "–∞–∫—Ç–∏–≤–Ω—ã–π", "max_speed": 28, "avg_speed": 22},
        {"name": "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "max_speed": 35, "avg_speed": 28}
    ]
    
    results = []
    
    for style in styles:
        test_data = {
            "filename": f"test_{style['name']}_style.csv",
            "timestamp": datetime.now().isoformat(),
            "records_count": 1200,
            "distance_km": 8.5,
            "duration_min": 30,
            "battery_start": 90.0,
            "battery_end": 60.0,
            "battery_used": 30.0,
            "battery_efficiency": 3.5,
            "max_speed": style["max_speed"],
            "avg_speed": style["avg_speed"],
            "avg_temp": 40.0,
            "data_quality": "good",
            "chat_id": TELEGRAM_CHAT_ID
        }
        
        try:
            response = requests.post(
                f"{N8N_URL}/webhook/wheellog-webhook",
                json=test_data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –°—Ç–∏–ª—å '{style['name']}': {result.get('status', 'unknown')}")
                results.append(True)
            else:
                print(f"‚ùå –°—Ç–∏–ª—å '{style['name']}': –æ—à–∏–±–∫–∞ {response.status_code}")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå –°—Ç–∏–ª—å '{style['name']}': {e}")
            results.append(False)
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    return all(results)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WheelLog Analytics (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 70)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    global TELEGRAM_CHAT_ID, N8N_URL, FASTAPI_URL
    
    TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', TELEGRAM_CHAT_ID)
    N8N_URL = os.getenv('N8N_URL', N8N_URL)
    FASTAPI_URL = os.getenv('FASTAPI_URL', FASTAPI_URL)
    
    print(f"üì° FastAPI URL: {FASTAPI_URL}")
    print(f"üîó n8n URL: {N8N_URL}")
    print(f"üí¨ Telegram Chat ID: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if TELEGRAM_CHAT_ID != 'YOUR_CHAT_ID' else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
    print()
    
    tests = [
        ("FastAPI Health", test_fastapi_health),
        ("n8n Webhook (Local Analysis)", test_n8n_webhook),
        ("FastAPI ‚Üí n8n Integration", test_fastapi_n8n_integration),
        ("Short Trip Filter", test_short_trip),
        ("Different Riding Styles", test_different_riding_styles)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print("   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–∫–∏–¥–∞—é—Ç –≤–∞—à —Å–µ—Ä–≤–µ—Ä")
        print("   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤")
        print("   ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        print("   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è - –Ω–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ AI API")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        if not any(result for _, result in results[:2]):  # FastAPI –∏ n8n
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI –∑–∞–ø—É—â–µ–Ω: sudo systemctl status wheellog-api.service")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ n8n –¥–æ—Å—Ç—É–ø–µ–Ω –≤ LXC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
            print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ n8n")
            print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ credentials –≤ n8n")

if __name__ == "__main__":
    main()

