#!/usr/bin/env python3
"""
WheelLog AI Analyzer Service
–°–µ—Ä–≤–∏—Å –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–æ–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GigaChat
"""

import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
import psycopg2
import requests
from fastapi import FastAPI, BackgroundTasks, HTTPException
from pydantic import BaseModel
import uvicorn
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="WheelLog AI Analyzer", version="1.0.0")

class TripWebhookPayload(BaseModel):
    filename: str
    timestamp: str
    records_count: int
    distance_km: float
    duration_min: int
    battery_start: int
    battery_end: int
    battery_used: int
    max_speed: float
    avg_speed: float

class GigaChatClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API"""
    
    def __init__(self):
        self.api_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.token = os.getenv("GIGACHAT_TOKEN")
        if not self.token:
            raise ValueError("GIGACHAT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.token}'
        }
    
    async def analyze_trip(self, trip_data: Dict[str, Any], detailed_stats: Dict[str, Any]) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ GigaChat"""
        
        prompt = self._create_analysis_prompt(trip_data, detailed_stats)
        
        payload = {
            "model": "GigaChat",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–æ–∫ –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.3,
            "max_tokens": 500
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            return result['choices'][0]['message']['content']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑"
    
    def _create_analysis_prompt(self, trip_data: Dict[str, Any], detailed_stats: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–∫–∏"""
        
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–µ–∑–¥–∫—É –Ω–∞ –º–æ–Ω–æ–∫–æ–ª–µ—Å–µ:

üìä –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {trip_data['distance_km']} –∫–º
- –í—Ä–µ–º—è: {trip_data['duration_min']} –º–∏–Ω
- –ë–∞—Ç–∞—Ä–µ—è: {trip_data['battery_start']}% ‚Üí {trip_data['battery_end']}% (-{trip_data['battery_used']}%)
- –ú–∞–∫—Å —Å–∫–æ—Ä–æ—Å—Ç—å: {trip_data['max_speed']} –∫–º/—á
- –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {trip_data['avg_speed']} –∫–º/—á

üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –†–∞—Å—Ö–æ–¥ –±–∞—Ç–∞—Ä–µ–∏ –Ω–∞ –∫–º: {detailed_stats.get('battery_per_km', 0):.1f}%/–∫–º
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {detailed_stats.get('efficiency_score', 0):.1f}/10
- –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –µ–∑–¥—ã: {detailed_stats.get('aggressiveness', 0):.1f}/10
- –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {detailed_stats.get('avg_temp', 0):.1f}¬∞C
- –í—Ä–µ–º—è –Ω–∞ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (>25 –∫–º/—á): {detailed_stats.get('high_speed_time', 0):.1f}%

üìö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–µ–∑–¥–∫–∞–º–∏:
- –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –±–∞—Ç–∞—Ä–µ–∏: {detailed_stats.get('avg_battery_usage', 0):.1f}%/–∫–º
- –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—ã—á–Ω–æ: {detailed_stats.get('typical_avg_speed', 0):.1f} –∫–º/—á

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):
1. –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º —Å—Ç–∏–ª–µ–º –µ–∑–¥—ã
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ —Ö–æ–¥–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –∑–∞—Ä—è–¥–µ

–§–æ—Ä–º–∞—Ç: —ç–º–æ–¥–∑–∏ + –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω.
"""

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': os.getenv('DB_PORT', '5432'),
            'database': os.getenv('DB_NAME', 'wheellog'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', '')
        }
    
    def get_trip_detailed_stats(self, filename: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –ë–î"""
        
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
            query = """
            WITH trip_data AS (
                SELECT 
                    speed, battery, temp, distance,
                    timestamp,
                    LAG(battery) OVER (ORDER BY timestamp) as prev_battery
                FROM wheellog_data 
                WHERE filename = %s 
                ORDER BY timestamp
            ),
            trip_stats AS (
                SELECT 
                    COUNT(*) as total_points,
                    AVG(temp) as avg_temp,
                    AVG(CASE WHEN speed > 25 THEN 1 ELSE 0 END) * 100 as high_speed_percentage,
                    STDDEV(speed) as speed_deviation,
                    MAX(distance) as total_distance,
                    (MAX(battery) - MIN(battery)) as battery_used,
                    EXTRACT(EPOCH FROM (MAX(timestamp) - MIN(timestamp)))/60 as duration_min
                FROM trip_data
            ),
            historical_avg AS (
                SELECT 
                    AVG(battery_usage_per_km) as avg_battery_per_km,
                    AVG(avg_speed) as typical_avg_speed
                FROM (
                    SELECT 
                        filename,
                        (MAX(battery) - MIN(battery))::float / NULLIF(MAX(distance), 0) as battery_usage_per_km,
                        AVG(speed) as avg_speed
                    FROM wheellog_data 
                    WHERE timestamp > NOW() - INTERVAL '30 days'
                      AND filename != %s
                    GROUP BY filename
                    HAVING MAX(distance) > 1
                ) recent_trips
            )
            SELECT 
                ts.avg_temp,
                ts.high_speed_percentage,
                ts.speed_deviation,
                ts.total_distance,
                ts.battery_used,
                ts.duration_min,
                COALESCE(ha.avg_battery_per_km, 0) as avg_battery_usage,
                COALESCE(ha.typical_avg_speed, 0) as typical_avg_speed
            FROM trip_stats ts
            CROSS JOIN historical_avg ha
            """
            
            cursor.execute(query, (filename, filename))
            result = cursor.fetchone()
            
            if result:
                avg_temp, high_speed_pct, speed_dev, total_dist, battery_used, duration, avg_battery_usage, typical_speed = result
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                battery_per_km = battery_used / max(total_dist, 0.1)
                efficiency_score = max(0, min(10, 10 - (battery_per_km - 3) * 2))  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                aggressiveness = min(10, max(0, speed_dev / 3))  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–±—Ä–æ—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
                
                return {
                    'avg_temp': avg_temp or 25,
                    'high_speed_time': high_speed_pct or 0,
                    'battery_per_km': battery_per_km,
                    'efficiency_score': efficiency_score,
                    'aggressiveness': aggressiveness,
                    'avg_battery_usage': avg_battery_usage or battery_per_km,
                    'typical_avg_speed': typical_speed or 18
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            if 'conn' in locals():
                conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'avg_temp': 25,
            'high_speed_time': 0,
            'battery_per_km': 4.0,
            'efficiency_score': 7.0,
            'aggressiveness': 5.0,
            'avg_battery_usage': 4.0,
            'typical_avg_speed': 18
        }

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.email_config = {
            'smtp_server': os.getenv('SMTP_SERVER'),
            'smtp_port': int(os.getenv('SMTP_PORT', '587')),
            'email_user': os.getenv('EMAIL_USER'),
            'email_password': os.getenv('EMAIL_PASSWORD'),
            'recipient': os.getenv('EMAIL_RECIPIENT')
        }
    
    async def send_telegram_report(self, report: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
        if not self.telegram_bot_token or not self.telegram_chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            payload = {
                'chat_id': self.telegram_chat_id,
                'text': report,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            logger.info("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_email_report(self, subject: str, report: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ email"""
        if not all(self.email_config.values()):
            logger.warning("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            import smtplib
            from email.mime.text import MIMEText
            from email.mime.multipart import MIMEMultipart
            
            msg = MIMEMultipart()
            msg['From'] = self.email_config['email_user']
            msg['To'] = self.email_config['recipient']
            msg['Subject'] = subject
            
            msg.attach(MIMEText(report, 'plain', 'utf-8'))
            
            with smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port']) as server:
                server.starttls()
                server.login(self.email_config['email_user'], self.email_config['email_password'])
                server.send_message(msg)
            
            logger.info("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
gigachat_client = GigaChatClient()
db_manager = DatabaseManager()
notification_manager = NotificationManager()

@app.post("/analyze-trip")
async def analyze_trip_endpoint(payload: TripWebhookPayload, background_tasks: BackgroundTasks):
    """Endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ FastAPI)"""
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø–æ–µ–∑–¥–∫–∏: {payload.filename}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(process_trip_analysis, payload.dict())
    
    return {"status": "accepted", "message": "–ê–Ω–∞–ª–∏–∑ –ø–æ–µ–∑–¥–∫–∏ –∑–∞–ø—É—â–µ–Ω"}

async def process_trip_analysis(trip_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–∫–∏"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        detailed_stats = db_manager.get_trip_detailed_stats(trip_data['filename'])
        
        # –ü–æ–ª—É—á–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑
        ai_analysis = await gigachat_client.analyze_trip(trip_data, detailed_stats)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = create_trip_report(trip_data, detailed_stats, ai_analysis)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notification_manager.send_telegram_report(report)
        await notification_manager.send_email_report(
            f"üõ¥ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - {trip_data['distance_km']} –∫–º", 
            report
        )
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø–æ–µ–∑–¥–∫–∏ {trip_data['filename']} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–∫–∏: {e}")

def create_trip_report(trip_data: Dict[str, Any], detailed_stats: Dict[str, Any], ai_analysis: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–µ–∑–¥–∫–µ"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    duration_hours = trip_data['duration_min'] // 60
    duration_mins = trip_data['duration_min'] % 60
    duration_str = f"{duration_hours}—á {duration_mins}–º" if duration_hours > 0 else f"{duration_mins}–º"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–∞ —Ö–æ–¥–∞
    remaining_range = (trip_data['battery_end'] / max(detailed_stats['battery_per_km'], 0.1))
    
    report = f"""üõ¥ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ {trip_data['distance_km']} –∫–º –∑–∞ {duration_str}
‚Ä¢ –ë–∞—Ç–∞—Ä–µ—è: {trip_data['battery_start']}% ‚Üí {trip_data['battery_end']}% (-{trip_data['battery_used']}%)
‚Ä¢ –ú–∞–∫—Å —Å–∫–æ—Ä–æ—Å—Ç—å: {trip_data['max_speed']} –∫–º/—á
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {trip_data['avg_speed']} –∫–º/—á
‚Ä¢ –†–∞—Å—Ö–æ–¥: {detailed_stats['battery_per_km']:.1f}%/–∫–º

‚ö° <b>–û—Å—Ç–∞—Ç–æ–∫ —Ö–æ–¥–∞:</b> ~{remaining_range:.1f} –∫–º

ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑:</b>
{ai_analysis}

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
    
    return report

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "gigachat": bool(os.getenv("GIGACHAT_TOKEN")),
            "database": bool(os.getenv("DB_HOST")),
            "telegram": bool(os.getenv("TELEGRAM_BOT_TOKEN")),
            "email": bool(os.getenv("SMTP_SERVER"))
        }
    }

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "WheelLog AI Analyzer",
        "version": "1.0.0",
        "uptime": "running"
    }

if __name__ == "__main__":
    uvicorn.run(
        "ai_analyzer:app", 
        host="0.0.0.0", 
        port=8001, 
        reload=True,
        log_level="info"
    )

